'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = clientStartup;

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _createReactElement = require('./createReactElement');

var _createReactElement2 = _interopRequireDefault(_createReactElement);

var _handleError = require('./handleError');

var _handleError2 = _interopRequireDefault(_handleError);

var _isRouterResult = require('./isRouterResult');

var _isRouterResult2 = _interopRequireDefault(_isRouterResult);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var REACT_ON_RAILS_COMPONENT_CLASS_NAME = 'js-react-on-rails-component';

function debugTurbolinks() {
  if (!window) {
    return;
  }

  if (window.DEBUG_TURBOLINKS) {
    var _console;

    for (var _len = arguments.length, msg = Array(_len), _key = 0; _key < _len; _key++) {
      msg[_key] = arguments[_key];
    }

    (_console = console).log.apply(_console, ['TURBO:'].concat(msg));
  }
}

function turbolinksInstalled() {
  return typeof Turbolinks !== 'undefined';
}

function forEachComponent(fn) {
  var els = document.getElementsByClassName(REACT_ON_RAILS_COMPONENT_CLASS_NAME);
  for (var i = 0; i < els.length; i++) {
    fn(els[i]);
  }
}

/**
 * Used for client rendering by ReactOnRails
 * @param el
 */
function render(el) {
  var name = el.getAttribute('data-component-name');
  var domNodeId = el.getAttribute('data-dom-id');
  var props = JSON.parse(el.getAttribute('data-props'));
  var trace = JSON.parse(el.getAttribute('data-trace'));
  var expectTurboLinks = JSON.parse(el.getAttribute('data-expect-turbo-links'));

  if (!turbolinksInstalled() && expectTurboLinks) {
    console.warn('WARNING: NO TurboLinks detected in JS, but it is in your Gemfile');
  }

  try {
    var domNode = document.getElementById(domNodeId);
    if (domNode) {
      var reactElementOrRouterResult = (0, _createReactElement2.default)({
        name: name,
        props: props,
        domNodeId: domNodeId,
        trace: trace
      });

      if ((0, _isRouterResult2.default)(reactElementOrRouterResult)) {
        throw new Error('You returned a server side type of react-router error: ' + (0, _stringify2.default)(reactElementOrRouterResult) + '\nYou should return a React.Component always for the client side entry point.');
      } else {
        _reactDom2.default.render(reactElementOrRouterResult, domNode);
      }
    }
  } catch (e) {
    (0, _handleError2.default)({
      e: e,
      name: name,
      serverSide: false
    });
  }
}

function reactOnRailsPageLoaded() {
  debugTurbolinks('reactOnRailsPageLoaded');

  forEachComponent(render);
}

function unmount(el) {
  var domNodeId = el.getAttribute('data-dom-id');
  var domNode = document.getElementById(domNodeId);
  _reactDom2.default.unmountComponentAtNode(domNode);
}

function reactOnRailsPageUnloaded() {
  debugTurbolinks('reactOnRailsPageUnloaded');
  forEachComponent(unmount);
}

function clientStartup(context) {
  var document = context.document;

  // Check if server rendering
  if (!document) {
    return;
  }

  // Tried with a file local variable, but the install handler gets called twice.
  if (context.__REACT_ON_RAILS_EVENT_HANDLERS_RAN_ONCE__) {
    return;
  }

  context.__REACT_ON_RAILS_EVENT_HANDLERS_RAN_ONCE__ = // eslint-disable-line no-param-reassign
  true;

  debugTurbolinks('Adding DOMContentLoaded event to install event listeners.');

  document.addEventListener('DOMContentLoaded', function () {
    // Install listeners when running on the client (browser).
    // We must do this check for turbolinks AFTER the document is loaded because we load the
    // Webpack bundles first.

    if (!turbolinksInstalled()) {
      debugTurbolinks('WITHOUT TURBOLINKS: DOMContentLoaded handler installed.');
      reactOnRailsPageLoaded();
    } else {
      debugTurbolinks('WITH TURBOLINKS: document page:before-unload and page:change handlers' + ' installed.');
      document.addEventListener('page:before-unload', reactOnRailsPageUnloaded);
      document.addEventListener('page:change', reactOnRailsPageLoaded);
    }
  });
}